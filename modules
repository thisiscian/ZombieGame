class position_t {
  int x;
  int y;

  void update(int x_in, int y_in){
    x = x_in;
    y = y_in;
  }
}

class Monster {
  // the id of the current monster
  int id;

  // the chromosome array
  array<int> &Traits;

  // The length of the chromosome array
  int TraitsSize;

  // The current health of the monster
  int health;

  // The current position on the map of the monster
  position_t position

  void initialize(){
    id = rand();
    Traits = new array<int>(TraitSize);
    // whatever other initializations may be necessary
  } 
}

class MonsterGenerator {
  /*
   *  Monster Pool stuff
   */

  // The current pool of monsters
  Array<Monster> pool;

  // The size the pool should be
  int pool_size;

  /*
   *  Monster pool io
   */

  // removes numberOfMonsters from the current pool
  //  and returns them in an array
  Array<Monster> get(numberOfMonsters);

  // Add a monster to the pool
  void put(Monster);


  /*
   *  Genetic stuff
   */

  // Take current gene pool, perform genetic algorithm
  //  etc and generate the next generation
  void updateGeneration();

  // Returns the value of the fitness function on the given monster
  float fitness(Monster);


  void initialize(){
    //perform whatever initializations are necessary
  }

}

class Map {
  // some form of map generation
  // have no idea of the best way to do this
}

class Player {
  // need some stuff here
  int health;
  position_t position;

  array<weapon> weapons;
}

class Screen {
  // this should take the necessary things in and update the
  //  screen accortingly

  GameLogic game;
}

class GameLogic {
  // this should take the necessary things in and update the
  //  game data accordingly

  array<Player> players;
  array<Monsters> monsters;
  Map map;
  GenePool gene_pool;
}
